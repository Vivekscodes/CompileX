```javascript
'use strict';

const getDiscriminatorByValue = require('./getDiscriminatorByValue');

/**
 * Find the correct constructor, taking into account discriminators.
 * @api private
 * @param {Function} Constructor The base constructor.
 * @param {Object} value The value being constructed.
 * @param {*} defaultDiscriminatorValue The default discriminator value.
 * @returns {Function} The correct constructor to use.
 */
module.exports = function getConstructor(Constructor, value, defaultDiscriminatorValue) {
  // Get the discriminator key from the schema options.
  const discriminatorKey = Constructor.schema.options.discriminatorKey;

  // Determine the discriminator value.  First try to get it from the value,
  // then fall back to the default.
  let discriminatorValue = (value != null && value[discriminatorKey]);
  if (discriminatorValue == null) {
    discriminatorValue = defaultDiscriminatorValue;
  }

  // If there are discriminators and we have a discriminator value,
  // try to find the correct constructor.
  if (Constructor.discriminators && discriminatorValue != null) {
    // First, check if the discriminator value is a direct key in the discriminators object.
    if (Constructor.discriminators[discriminatorValue]) {
      Constructor = Constructor.discriminators[discriminatorValue];
    } else {
      // If not, use the `getDiscriminatorByValue` function to find the constructor.
      const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, discriminatorValue);
      if (constructorByValue) {
        Constructor = constructorByValue;
      }
    }
  }

  return Constructor;
};
```